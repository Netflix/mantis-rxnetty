/*
 * Copyright 2019 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'nebula.netflixoss'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-netflixoss-project-plugin:5.1.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

ext {
    versionSuffix = "1"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

version = "${rootProject.versionRxNetty}.${versionSuffix}${project.gradle.startParameter.taskNames.contains('snapshot') ? '-SNAPSHOT' : ''}"

repositories {
    jcenter()
}

dependencies {
    runtime "io.reactivex:rxjava:${rootProject.versionRxJava}"
    runtime "io.netty:netty-handler:${rootProject.versionIoNetty}"
    runtime "io.netty:netty-codec-http:${rootProject.versionIoNetty}"
    runtime "io.netty:netty-transport-native-epoll:${rootProject.versionIoNetty}"
    runtime "org.slf4j:slf4j-api:${rootProject.versionSlf4j}"

    // These dependencies are shaded.
    compile "io.reactivex:rxnetty:${rootProject.versionRxNetty}"
}

shadowJar {
    classifier = null
    dependencies {
        include dependency("io.reactivex:rxnetty:${rootProject.versionRxNetty}")
    }
    relocate 'io.reactivex', 'mantis.io.reactivex'
}

jar.deleteAllActions()
jar.dependsOn shadowJar

afterEvaluate {
    publishing {
        publications {
            // to remove shaded dependency from ivy.xml
            withType(IvyPublication) {
                descriptor.withXml {
                    asNode()
                        .dependencies
                        .dependency
                        .findAll {
                            it.@name == "rxnetty"
                        }
                        .each { it.parent().remove(it) }
                }
            }

            // to remove shaded dependency from pom.xml
            withType(MavenPublication) {
                pom.withXml {
                    asNode()
                        .dependencies
                        .dependency
                        .findAll {
                            it.artifactId.text() == "rxnetty"
                        }
                        .each { it.parent().remove(it) }
                }
            }
        }
    }
}
